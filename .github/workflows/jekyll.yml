# .github/workflows/jekyll.yml

name: Build and Deploy Jekyll Site to Pages

on:
  # 在推送到 `main` 分支时运行
  push:
    branches: ["main"]
  # 允许你手动从 Actions 标签页运行这个工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过排队中的旧任务
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 服务器
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 检出你的仓库代码

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # 可以指定 Ruby 版本
          bundler-cache: true # 缓存 Gem，加快后续构建速度

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        # 使用 `bundle exec jekyll build` 命令构建网站
        # `--baseurl ${{ steps.pages.outputs.base_path }}` 是关键，它会正确设置基础路径
        run: bundle exec jekyll build --source . --destination _site --baseurl "${{ steps.pages.outputs.base_path }}"

      - name: Upload artifact
        # 将构建好的 `_site` 文件夹作为产物上传
        uses: actions/upload-pages-artifact@v3

  # 部署任务
  deploy:
    needs: build # 部署任务依赖于构建任务
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 输出最终的网站 URL
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # 将产物部署到 Pages
